name: Build Nodes

on:
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  
  # Ubuntu builds for gui / servo / flight (keep "before" behavior)
  # - gui: Node 21 via NodeSource, npm run tauri build
  # - servo & flight: cross build x86_64-unknown-linux-gnu (unchanged)
  
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [gui, servo, flight]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then 
            sudo apt remove -y nodejs || true
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - && \
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
          fi

      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          set -e
          cd ${{ matrix.node }}
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt install -y \
                libwebkit2gtk-4.1-dev \
                build-essential \
                libssl-dev \
                libgtk-3-dev \
                libayatana-appindicator3-dev \
                librsvg2-dev \
                libsoup2.4-dev \
                libjavascriptcoregtk-4.0-dev \
                libwebkit2gtk-4.0-dev
            npm run tauri build
          else
            sudo apt-get update
            sudo apt-get install -y python3 python3-venv python3-pip
            cargo install cross --locked
            rustup target add x86_64-unknown-linux-gnu
            cross build --target x86_64-unknown-linux-gnu --release
          fi
          
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/release/${{ matrix.node }}
          if-no-files-found: warn

  
  # ARMv7 builds using Rust "cross" (NO QEMU) for SAM & Servo
  
  cross-armv7:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [sam, servo]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust & cross
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup target add armv7-unknown-linux-gnueabihf
          cargo install cross --locked

      - name: Build ${{ matrix.node }} (armv7) with cross
        run: |
          set -e
          cd ${{ matrix.node }}
          cross build --target armv7-unknown-linux-gnueabihf --release

      - name: Upload armv7 binary (${{ matrix.node }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-armv7-binary
          path: ${{ matrix.node }}/target/armv7-unknown-linux-gnueabihf/release/*
          if-no-files-found: error

  
  # ARMv7 build via QEMU (Docker emulation) for FLIGHT ONLY
  
  qemu-armv7-flight:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clear Cargo Git Cache
        run: |
          rm -rf ~/.cargo/git/db || true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build flight (armv7) via QEMU container
        run: |
          set -e
          docker run --rm \
            --platform linux/arm/v7 \
            -v "$(pwd)":/workspace \
            -w /workspace/flight \
            arm32v7/ubuntu:latest \
            /bin/bash -lc "apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                             build-essential gcc-arm-linux-gnueabihf curl ca-certificates pkg-config && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           . /root/.cargo/env && \
                           rustup target add armv7-unknown-linux-gnueabihf && \
                           export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc && \
                           cargo build --target armv7-unknown-linux-gnueabihf --release"

      - name: Upload flight armv7 binary (QEMU)
        uses: actions/upload-artifact@v4
        with:
          name: flight-armv7-binary-qemu
          path: flight/target/armv7-unknown-linux-gnueabihf/release/*
          if-no-files-found: error
