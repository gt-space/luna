name: Build Nodes

on:
# Commented out for testing
# Changed github.event.pull_request.merged to github.event_name
#  pull_request:
#    types: [closed]
# Manual trigger
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [gui, servo, flight, sam, bms]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then 
            sudo apt remove nodejs
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - &&\
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
            cargo install cross --locked
          fi
      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          cd ${{ matrix.node }}
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt install -y \
                libwebkit2gtk-4.1-dev \
                build-essential \
                libssl-dev \
                libgtk-3-dev \
                libayatana-appindicator3-dev \
                librsvg2-dev \
                libsoup2.4-dev \
                libjavascriptcoregtk-4.0-dev \
                libwebkit2gtk-4.0-dev 
            npm run tauri build
          elif [ "${{ matrix.node }}" = "sam" ] || [ "${{ matrix.node }}" = "bms" ]; then
            rustup target add armv7-unknown-linux-gnueabihf
            cross build --target armv7-unknown-linux-gnueabihf --release
          else
            cargo build --release
          fi
      # Upload the binaries as an artifact (so we can download later)
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.node }}           
            target/release/${{ matrix.node }}*  
  # Compile sam and flight for armv7 using QEMU
  compile-common-armv7:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Set up Rust and Vendor Dependencies (Host)
        # This step runs cargo vendor and correctly creates the config.toml file
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          
          # 1. Ensure .cargo directory exists
          mkdir -p .cargo
          # 2. Run cargo vendor and capture output to config.toml
          cargo vendor > .cargo/config.toml
          echo "Vendored dependencies and generated .cargo/config.toml successfully."
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
            
      - name: Clear Cargo Git Cache
        # This clears the *host* cache, but the vendored files are now local anyway. Keeping it for cleanup.
        run: rm -rf ~/.cargo/git/db

      - name: Build common shared library for ARMv7
        # Note: The vendored dependencies (.cargo/config.toml and vendor/ directory) 
        # are automatically mounted inside the container via the volume mount.
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -e CARGO_HOME=/workspace/cargo_home \
            -v "$(pwd)":/workspace \
            -w /workspace/common \
            arm32v7/ubuntu:latest \
            /bin/bash -c "set -euxo pipefail; \
                          mkdir -p /workspace/cargo_home; \
                          # FIX: Added python3 and python3-dev to satisfy pyo3 dependency
                          apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev python3 python3-dev && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          . /workspace/cargo_home/env && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          rm -rf /workspace/cargo_home/git/db || true && \
                          git config --global fetch.fsckObjects false && \
                          git config --global fetch.recurseSubmodules true && \
                          # Since config.toml is now present, cargo build should use vendored dependencies
                          cargo rustc --release --target armv7-unknown-linux-gnueabihf --crate-type cdylib --features sequences && \
                          find /workspace/target -type f -name "libcommon*" 2>/dev/null || true"
                          
      - name: Upload common shared library
        uses: actions/upload-artifact@v4
        with:
          name: common-armv7-library
          path: target/armv7-unknown-linux-gnueabihf/release/libcommon.so

  # Modified Job (formerly compile-armv7), now depends on common and prepares the dependency
  compile-flight-armv7:
    runs-on: ubuntu-22.04
    needs: [compile-common-armv7] # Ensure common is built first
    strategy:
      matrix:
        node: [flight] # armv7 targets
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup and Vendor steps repeated to ensure a consistent environment 
      # and vendored files are present if this job is run independently (optional).
      - name: Set up Rust and Vendor Dependencies (Host)
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          
          # 1. Ensure .cargo directory exists
          mkdir -p .cargo
          # 2. Run cargo vendor and capture output to config.toml
          cargo vendor > .cargo/config.toml
          echo "Vendored dependencies and generated .cargo/config.toml successfully."
      # NEW STEP: Download the compiled shared library
      - name: Download common shared library
        uses: actions/download-artifact@v4
        with:
          name: common-armv7-library
          path: flight/common_dep_temp # Download to a temporary location

      # NEW STEP: Prepare and rename the dependency for the flight build
      - name: Prepare common dependency for flight
        run: |
          # Move the downloaded 'libcommon.so' file into the 'flight' directory 
          # and rename it to 'common.so' as specified in the manual guide.
          mkdir -p flight
          mv flight/common_dep_temp/libcommon.so flight/common.so
          echo "Dependency 'common.so' prepared for flight build."
            
      - name: Clear Cargo Git Cache
        run: |
          rm -rf ~/.cargo/git/db
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
            
      - name: Build ${{ matrix.node }} for ARMv7
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -e CARGO_HOME=/workspace/cargo_home \
            -v "$(pwd)":/workspace \
            -w /workspace/${{ matrix.node }} \
            arm32v7/ubuntu:latest \
            /bin/bash -c "set -euxo pipefail; \
                          mkdir -p /workspace/cargo_home; \
                          # FIX: Added python3 and python3-dev to satisfy pyo3 dependency
                          apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev python3 python3-dev && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          . /workspace/cargo_home/env && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          rm -rf /workspace/cargo_home/git/db || true && \
                          git config --global fetch.fsckObjects false && \
                          git config --global fetch.recurseSubmodules true && \
                          # cargo fetch is no longer needed because dependencies are vendored
                          # common.so is available in the workspace root for linking
                          cargo build --target armv7-unknown-linux-gnueabihf --release"

      - name: Verify Build Output and Search Paths
        run: |
          NODE="${{ matrix.node }}"
          ARM_RELEASE_PATH="${NODE}/target/armv7-unknown-linux-gnueabihf/release"
          
          echo "--- 1. Checking expected deep path (Sync Failure Hypothesis) ---"
          if [ -d "$ARM_RELEASE_PATH" ]; then
            echo "Directory FOUND! Contents:"
            ls -lah "$ARM_RELEASE_PATH"
          else
            echo "Directory NOT FOUND: $ARM_RELEASE_PATH"
            
            # Check for the parent 'target' directory which should always exist
            echo "Checking existence of parent target directory:"
            ls -lah "${NODE}/target" || echo "${NODE}/target not found"
          fi
          
          echo "--- 2. Checking local node root for accidental spill ---"
          # Occasionally, the file might land directly in the node directory if linking fails
          ls -lah "${NODE}" | grep $NODE || echo "Binary not in node root: ${NODE}"
          
          echo "--- 3. Searching entire current workspace for binary ---"
          # Search the workspace root (where the job started) for the file named 'flight'
          # Limiting depth to 5 to prevent extreme run times, focusing on core directories.
          find . -maxdepth 5 -type f -name $NODE -print -exec ls -lah {} \; | grep $NODE || echo "Binary '$NODE' not found in top 5 directory levels."
          
          echo "--- End of exhaustive path check ---"
                          
      - name: Upload armv7 binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-armv7-binary
          path: target/armv7-unknown-linux-gnueabihf/release/${{ matrix.node }}
