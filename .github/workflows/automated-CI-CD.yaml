name: Build Nodes

on:
  # Manual trigger + branch push + PRs to main
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # ================= Ubuntu (x86_64 runner) builds =================
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [gui, servo, flight, sam, bms]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then 
            sudo apt remove -y nodejs || true
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash -
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source "$HOME/.cargo/env"
            cargo install cross --locked
          fi

      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          set -eux
          cd "${{ matrix.node }}"
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt-get install -y \
              libwebkit2gtk-4.1-dev \
              build-essential \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libsoup2.4-dev \
              libjavascriptcoregtk-4.0-dev \
              libwebkit2gtk-4.0-dev
            npm run tauri build
          elif [ "${{ matrix.node }}" = "sam" ] || [ "${{ matrix.node }}" = "bms" ]; then
            rustup target add armv7-unknown-linux-gnueabihf
            cross build --target armv7-unknown-linux-gnueabihf --release
          else
            cargo build --release
          fi

      # Upload binaries/artifacts
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.node }}
            target/release/${{ matrix.node }}*

  # ================= ARMv7 (flight) via QEMU Docker with CI-only repin =================
  compile-armv7:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [flight]  # armv7 targets, sam handled by cross above

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # CI-only repin of hdf5-rust to a reachable commit, then build ONLY flight
      - name: Build flight for ARMv7 (QEMU, git via CLI, CI-only repin)
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -v "$(pwd)":/workspace \
            -w /workspace \
            arm32v7/ubuntu:22.04 \
            /bin/bash -lc 'set -euxo pipefail; \
              apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y \
                build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev && \
              curl https://sh.rustup.rs -sSf | sh -s -- -y && \
              . /root/.cargo/env && \
              rustup target add armv7-unknown-linux-gnueabihf && \
              # clean container-side cargo git cache (fresh state)
              rm -rf /root/.cargo/git/db || true && \
              # 1) get a reachable commit for hdf5-rust (HEAD by default)
              NEW_SHA=$(git ls-remote https://github.com/aldanor/hdf5-rust HEAD | awk "{print \$1}") && \
              test -n "$NEW_SHA" && echo "Using hdf5-rust @ $NEW_SHA" && \
              # 2) update lockfile in CI ONLY (no repo change)
              cargo update -p hdf5 --precise "$NEW_SHA" --workspace --manifest-path /workspace/Cargo.toml && \
              # 3) build only the flight package for armv7
              cargo build --release \
                -p flight \
                --manifest-path /workspace/Cargo.toml \
                --target armv7-unknown-linux-gnueabihf \
                --locked'

      - name: Upload armv7 binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-armv7-binary
          path: ${{ matrix.node }}/target/armv7-unknown-linux-gnueabihf/release/*
