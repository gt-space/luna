name: Build Nodes

on:
  # Manual trigger + branch push + PRs to main
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # ================= Ubuntu (x86_64 runner) builds =================
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [gui, servo, flight, sam, bms]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then 
            sudo apt remove nodejs
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - &&\
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
            cargo install cross --locked
          fi

      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          cd ${{ matrix.node }}
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt install -y \
                libwebkit2gtk-4.1-dev \
                build-essential \
                libssl-dev \
                libgtk-3-dev \
                libayatana-appindicator3-dev \
                librsvg2-dev \
                libsoup2.4-dev \
                libjavascriptcoregtk-4.0-dev \
                libwebkit2gtk-4.0-dev 
            npm run tauri build
          elif [ "${{ matrix.node }}" = "sam" ] || [ "${{ matrix.node }}" = "bms" ]; then
            rustup target add armv7-unknown-linux-gnueabihf
            cross build --target armv7-unknown-linux-gnueabihf --release
          else
            cargo build --release
          fi

      # Upload the binaries as an artifact (so we can download later)
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.node }}           
            target/release/${{ matrix.node }}*  

  # ================= Build common (ARMv7) once, via QEMU =================
  compile-common-armv7:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Set up Rust and Vendor Dependencies (Host)
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          mkdir -p .cargo
          cargo vendor > .cargo/config.toml
          echo "Vendored dependencies and generated .cargo/config.toml successfully."
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
            
      - name: Clear Cargo Git Cache
        run: rm -rf ~/.cargo/git/db || true

      - name: Build common shared library for ARMv7
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -e CARGO_HOME=/workspace/cargo_home \
            -v "$(pwd)":/workspace \
            -w /workspace/common \
            arm32v7/ubuntu:latest \
            /bin/bash -c "set -euxo pipefail; \
                          mkdir -p /workspace/cargo_home; \
                          apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev python3 python3-dev && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          . /workspace/cargo_home/env && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          rm -rf /workspace/cargo_home/git/db || true && \
                          git config --global fetch.fsckObjects false && \
                          git config --global fetch.recurseSubmodules true && \
                          cargo rustc --release --target armv7-unknown-linux-gnueabihf --crate-type cdylib --features sequences && \
                          find /workspace/target -type f -name 'libcommon*' 2>/dev/null || true"
                          
      - name: Upload common shared library
        uses: actions/upload-artifact@v4
        with:
          name: common-armv7-library
          path: target/armv7-unknown-linux-gnueabihf/release/libcommon.so

  # ================= flight (ARMv7) via QEMU; uses vendored crates + CI-only repin for git dep =================
  compile-flight-armv7:
    runs-on: ubuntu-22.04
    needs: [compile-common-armv7] # Ensure common is built first
    strategy:
      matrix:
        node: [flight]
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Repeat vendor so this job is standalone-safe
      - name: Set up Rust and Vendor Dependencies (Host)
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          mkdir -p .cargo
          cargo vendor > .cargo/config.toml
          echo "Vendored dependencies and generated .cargo/config.toml successfully."

      - name: Download common shared library
        uses: actions/download-artifact@v4
        with:
          name: common-armv7-library
          path: flight/common_dep_temp

      - name: Prepare common dependency for flight
        run: |
          mkdir -p flight
          mv flight/common_dep_temp/libcommon.so flight/common.so
          echo "Dependency 'common.so' prepared for flight build."
            
      - name: Clear Cargo Git Cache (host)
        run: rm -rf ~/.cargo/git/db || true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
            
      - name: Build flight for ARMv7 (QEMU, CLI git, CI-only repin)
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -e CARGO_HOME=/workspace/cargo_home \
            -v "$(pwd)":/workspace \
            -w /workspace \
            arm32v7/ubuntu:latest \
            /bin/bash -lc "set -euxo pipefail; \
                          mkdir -p /workspace/cargo_home; \
                          apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev python3 python3-dev && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          . /workspace/cargo_home/env && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          rm -rf /workspace/cargo_home/git/db || true && \
                          git config --global fetch.fsckObjects false && \
                          git config --global fetch.recurseSubmodules true && \
                          # --- CI-only repin of hdf5-rust to a reachable commit (does not modify your repo) ---
                          NEW_SHA=\$(git ls-remote https://github.com/aldanor/hdf5-rust HEAD | awk '{print \$1}') && \
                          test -n \"\$NEW_SHA\" && echo \"Using hdf5-rust @ \$NEW_SHA\" && \
                          cargo update -p hdf5 --precise \"\$NEW_SHA\" --workspace --manifest-path /workspace/Cargo.toml && \
                          # --- build ONLY the flight package for armv7 ---
                          cargo build --release \
                            -p flight \
                            --manifest-path /workspace/Cargo.toml \
                            --target armv7-unknown-linux-gnueabihf \
                            --locked"

      - name: Upload armv7 binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-armv7-binary
          path: ${{ matrix.node }}/target/armv7-unknown-linux-gnueabihf/release/*
