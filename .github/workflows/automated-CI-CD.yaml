name: Build & Upload Artifacts

on:
  push:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  
  # 1) Vendor bundles for offline Pi builds (common, fc)
  
  vendor-bundles:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Prepare vendor for common
        working-directory: common
        run: |
          mkdir -p .cargo
          # Create vendor dir and minimal config that points to it
          cargo vendor --versioned-dirs vendor > .cargo/config.toml.snippet
          cat > .cargo/config.toml <<'EOF'
[source.crates-io]
replace-with = "vendored-sources"

[vendored-sources]
directory = "vendor"
EOF
          echo "Build (Pi, offline): cargo build -F sequences" > README.txt
          tar -czf ../common_vendor.tar.gz vendor .cargo/config.toml README.txt

      - name: Prepare vendor for fc
        working-directory: fc
        run: |
          mkdir -p .cargo
          cargo vendor --versioned-dirs vendor > .cargo/config.toml.snippet
          cat > .cargo/config.toml <<'EOF'
[source.crates-io]
replace-with = "vendored-sources"

[vendored-sources]
directory = "vendor"
EOF
          echo "Build (Pi, offline): cargo build" > README.txt
          tar -czf ../fc_vendor.tar.gz vendor .cargo/config.toml README.txt

      - name: Upload vendor bundles
        uses: actions/upload-artifact@v4
        with:
          name: vendor-bundles
          path: |
            common_vendor.tar.gz
            fc_vendor.tar.gz
          if-no-files-found: error

  
  # 2) ARMv7 CLIs (sam, flight) via cross
  
  armv7_cli:
    name: armv7_cli (${{ matrix.pkg }}, armv7-unknown-linux-gnueabihf)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: [sam, flight]   # add more crates here if needed
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-unknown-linux-gnueabihf

      - uses: Swatinem/rust-cache@v2

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build (${{ matrix.pkg }}) for armv7
        run: cross build --release --target armv7-unknown-linux-gnueabihf -p ${{ matrix.pkg }}

      - name: Upload artifact (${{ matrix.pkg }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg }}-armv7-unknown-linux-gnueabihf
          path: target/armv7-unknown-linux-gnueabihf/release/${{ matrix.pkg }}
          if-no-files-found: error

  
  # 3) OPTIONAL: libcommon.so for armv7 with `sequences`
  
  common-so-armv7:
    name: common .so (armv7, with sequences)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-unknown-linux-gnueabihf

      - uses: Swatinem/rust-cache@v2

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build libcommon.so
        working-directory: common
        run: |
          cross build --release --target armv7-unknown-linux-gnueabihf -F sequences
          # convenience duplicate name expected by fc runtime
          cp -f ../target/armv7-unknown-linux-gnueabihf/release/libcommon.so \
                ../target/armv7-unknown-linux-gnueabihf/release/common.so || true

      - name: Upload libcommon.so (and common.so alias)
        uses: actions/upload-artifact@v4
        with:
          name: common-so-armv7
          path: |
            target/armv7-unknown-linux-gnueabihf/release/libcommon.so
            target/armv7-unknown-linux-gnueabihf/release/common.so
          if-no-files-found: warn

  
  # 4) GUI Linux build (Ubuntu) using your npm script
  
  gui_linux:
    name: ubuntu_gui (tauri)
    runs-on: ubuntu-latest
    defaults:
      run:
        # Set this to where your GUI lives inside the repo.
        # If your tree is actually ./luna/gui, change to "luna/gui".
        working-directory: gui
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Linux build deps for Tauri
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json
            **/package.json

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Install deps & build (Tauri)
        run: |
          npm ci
          npm run tauri build

      - name: List Linux bundles (debug)
        run: |
          ls -al src-tauri/target/release/bundle || true
          ls -al src-tauri/target/release/bundle/appimage || true
          ls -al src-tauri/target/release/bundle/deb || true

      - name: Upload GUI artifacts (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: gui-linux-artifacts
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: error

  
  # 5) : native Linux x86_64 CLI builds
  
  linux_cli:
    name: ubuntu_cli (${{ matrix.pkg }}, x86_64-unknown-linux-gnu)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: [sam, flight]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Build (${{ matrix.pkg }}) for linux x86_64
        run: cargo build --release -p ${{ matrix.pkg }}
      - name: Upload artifact (${{ matrix.pkg }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg }}-x86_64-unknown-linux-gnu
          path: target/release/${{ matrix.pkg }}
          if-no-files-found: error
