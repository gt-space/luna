name: Build & Upload Artifacts

on:
  push:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  
  # ARMv7 CLIs (sam, flight) via cross
  
  armv7_cli:
    name: armv7_cli (${{ matrix.pkg }}, armv7-unknown-linux-gnueabihf)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: [sam, flight]   # add more crates here if needed
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-unknown-linux-gnueabihf

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      - name: Install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build (${{ matrix.pkg }}) for armv7
        run: |
          cross build --release --target armv7-unknown-linux-gnueabihf -p ${{ matrix.pkg }}

      - name: List build outputs (debugging)
        run: |
          ls -al target/armv7-unknown-linux-gnueabihf/release || true

      - name: Upload artifact (${{ matrix.pkg }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg }}-armv7-unknown-linux-gnueabihf
          path: |
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.pkg }}
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.pkg }}.exe
          if-no-files-found: error


  # GUI macOS aarch64 DMG (Tauri)
  gui_macos_aarch64:
    name: macOS GUI (aarch64 DMG)
    runs-on: macos-14   # Apple Silicon runner produces aarch64 binaries
    defaults:
      run:
        working-directory: gui  # change if your GUI lives elsewhere
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      - name: Install Tauri CLI
        run: |
          npm i -g @tauri-apps/cli

      # If your build uses npm scripts, replace with `npm ci && npm run tauri build -- --target aarch64-apple-darwin`
      - name: Build Tauri (aarch64)
        run: |
          npm ci || true   # if no package.json at gui/, ignore
          tauri build --target aarch64-apple-darwin

      - name: List DMGs (debugging)
        run: |
          ls -al src-tauri/target/aarch64-apple-darwin/release/bundle/dmg || true
          ls -al src-tauri/target/release/bundle/dmg || true

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: gui-macos-aarch64-dmg
          path: |
            # Your stated path:
            luna/gui/src-tauri/target/release/bundle/dmg/*aarch64*.dmg
            # Common Taurey path (fallback with target triple subdir):
            gui/src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            gui/src-tauri/target/release/bundle/dmg/*aarch64*.dmg
          if-no-files-found: error

  
  # Example Linux x86_64 CLI build (optional)
  # Keep if you still want native Linux artifacts.
  
  linux_cli:
    name: ubuntu_cli (${{ matrix.pkg }}, x86_64-unknown-linux-gnu)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: [sam, flight]   # add more crates here if needed
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      - name: Build (${{ matrix.pkg }}) for linux x86_64
        run: |
          cargo build --release -p ${{ matrix.pkg }}

      - name: Upload artifact (${{ matrix.pkg }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg }}-x86_64-unknown-linux-gnu
          path: |
            target/release/${{ matrix.pkg }}
            target/release/${{ matrix.pkg }}.exe
          if-no-files-found: error
