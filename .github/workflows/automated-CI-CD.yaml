name: Build Nodes (x86_64 • Ubuntu GUI • armv7)

on:
  pull_request:
    types: [closed]                  # run on merged PRs (guarded per job)
  push:
    branches: [ dev/AVI/auto-CI-CD ] # iterate on your dev branch
  workflow_dispatch:

env:
  RUST_BACKTRACE: "1"

jobs:
  # ======================= x86_64 CLI (servo, flight) =======================
  x86_64_cli:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [servo, flight]
        arch: [x86_64-unknown-linux-gnu]
        include:
          - platform: linux/amd64
            image: ubuntu:22.04

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      # Build inside container and copy the exact binary to a stable host path
      - name: Build & copy ${{ matrix.node }} (${{ matrix.arch }}) via Docker
        run: |
          set -eux
          mkdir -p "dist/${{ matrix.node }}-${{ matrix.arch }}"
          docker run --rm \
            --platform linux/amd64 \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="-C debuginfo=1" \
            -e PYO3_PYTHON=python3 \
            -v "${PWD}":/workspace \
            -w "/workspace/${{ matrix.node }}" \
            ubuntu:22.04 \
            /bin/bash -lc "set -euxo pipefail; \
                           apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             build-essential curl ca-certificates pkg-config libssl-dev git \
                             binutils file cmake \
                             python3 python3-dev python3-venv python3-pip jq && \
                           update-alternatives --install /usr/bin/python python /usr/bin/python3 1 || true && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           export CARGO_TARGET_DIR=/workspace/targets/${{ matrix.node }}-${{ matrix.arch }} && \
                           cargo build --release --bin ${{ matrix.node }} && \
                           echo '=== RELEASE (x86_64) ==='; ls -la /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release || true && \
                           install -m 0755 /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} \
                                            /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }} && \
                           file /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }} || true && \
                           du -h  /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }} || true && \
                           ls -la /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}"
      - name: Upload ${{ matrix.node }} (${{ matrix.arch }}) binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-${{ matrix.arch }}
          path: dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }}
          if-no-files-found: error

  # ======================= Ubuntu GUI (x86_64 packaging) =======================
  ubuntu_gui:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      - name: Build GUI (x86_64) via Docker
        env:
          CARGO_TARGET_DIR: ${{ github.workspace }}/targets/gui-x86_64-unknown-linux-gnu
        run: |
          set -eux
          docker run --rm \
            --platform linux/amd64 \
            -e RUST_BACKTRACE=1 \
            -v "${PWD}":/workspace \
            -w "/workspace/gui" \
            ubuntu:22.04 \
            /bin/bash -lc "set -euxo pipefail; \
                           apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             curl ca-certificates build-essential pkg-config git binutils file \
                             libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev \
                             libgtk-3-dev libglib2.0-dev gobject-introspection \
                             libsoup2.4-dev libayatana-appindicator3-dev libnotify-dev \
                             librsvg2-dev libssl-dev \
                             patchelf desktop-file-utils dpkg-dev fakeroot \
                             squashfs-tools zsync && \
                           # 4.1 → 4.0 pc/so symlink workaround (kept from your working version)
                           ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.0.pc || true && \
                           ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc       /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc       || true && \
                           ln -sf /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.1.so               /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.0.so               || true && \
                           ln -sf /usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4.1.so        /usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4.0.so        || true && \
                           curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
                           apt-get install -y nodejs && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           export CARGO_TARGET_DIR=/workspace/targets/gui-x86_64-unknown-linux-gnu && \
                           npm ci || npm install && \
                           npm run tauri build && \
                           echo '=== BUNDLE DIR ===' && \
                           ls -la /workspace/targets/gui-x86_64-unknown-linux-gnu/release/bundle || true && \
                           find   /workspace/targets/gui-x86_64-unknown-linux-gnu/release/bundle -maxdepth 4 -type f -print || true"

      # Upload from the actual CARGO_TARGET_DIR set above
      - name: Upload GUI packages (preferred)
        uses: actions/upload-artifact@v4
        with:
          name: gui-x86_64-unknown-linux-gnu-ubuntu
          path: |
            targets/gui-x86_64-unknown-linux-gnu/release/bundle/**/*.AppImage
            targets/gui-x86_64-unknown-linux-gnu/release/bundle/**/*.deb
          if-no-files-found: warn

      # Optional fallback if packaging didn’t produce bundles
      - name: Upload GUI fallback (fs-gui)
        uses: actions/upload-artifact@v4
        with:
          name: gui-x86_64-unknown-linux-gnu-fs-gui
          path: targets/gui-x86_64-unknown-linux-gnu/release/fs-gui
          if-no-files-found: warn

  # ======================= armv7 (sam) via Rust cross-compile =======================
  armv7_cross_sam:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      # Build sam for armv7 using the GNU cross toolchain (no QEMU)
      - name: Build & copy sam (armv7-unknown-linux-gnueabihf) via cross-compile
        run: |
          set -eux
          mkdir -p dist/sam-armv7-unknown-linux-gnueabihf
          docker run --rm \
            --platform linux/amd64 \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="-C debuginfo=1" \
            -e PYO3_PYTHON=python3 \
            -e PKG_CONFIG_ALLOW_CROSS=1 \
            -v "${PWD}":/workspace \
            -w /workspace/sam \
            ubuntu:22.04 \
            /bin/bash -lc "set -euxo pipefail; \
                           apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             build-essential curl ca-certificates pkg-config libssl-dev git cmake \
                             python3 python3-dev python3-venv python3-pip \
                             gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf file && \
                           update-alternatives --install /usr/bin/python python /usr/bin/python3 1 || true && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           rustup target add armv7-unknown-linux-gnueabihf && \
                           export CARGO_TARGET_DIR=/workspace/targets/sam-armv7-unknown-linux-gnueabihf && \
                           export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc && \
                           export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc && \
                           cargo build --release --bin sam --target armv7-unknown-linux-gnueabihf && \
                           install -m 0755 /workspace/targets/sam-armv7-unknown-linux-gnueabihf/armv7-unknown-linux-gnueabihf/release/sam \
                                            /workspace/dist/sam-armv7-unknown-linux-gnueabihf/sam && \
                           file /workspace/dist/sam-armv7-unknown-linux-gnueabihf/sam && \
                           du -h  /workspace/dist/sam-armv7-unknown-linux-gnueabihf/sam && \
                           ls -la /workspace/dist/sam-armv7-unknown-linux-gnueabihf"

      - name: Upload sam (armv7-unknown-linux-gnueabihf) binary
        uses: actions/upload-artifact@v4
        with:
          name: sam-armv7-unknown-linux-gnueabihf
          path: dist/sam-armv7-unknown-linux-gnueabihf/sam
          if-no-files-found: error

  # ======================= armv7 (flight) via QEMU container =======================
  armv7_cli:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [flight]                                  # sam moved to cross job
        arch: [armv7-unknown-linux-gnueabihf]
        include:
          - platform: linux/arm/v7
            image: arm32v7/ubuntu:22.04

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      # Build inside ARMv7 container and copy the exact binary to a stable host path
      - name: Build & copy ${{ matrix.node }} (${{ matrix.arch }}) via Docker
        run: |
          set -eux
          mkdir -p "dist/${{ matrix.node }}-${{ matrix.arch }}"
          docker run --rm \
            --platform linux/arm/v7 \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="-C debuginfo=1" \
            -e PYO3_PYTHON=python3 \
            -v "${PWD}":/workspace \
            -w "/workspace/${{ matrix.node }}" \
            arm32v7/ubuntu:22.04 \
            /bin/bash -lc "set -euxo pipefail; \
                           apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             build-essential gcc-arm-linux-gnueabihf curl ca-certificates pkg-config libssl-dev git \
                             binutils file cmake \
                             python3 python3-dev python3-venv python3-pip jq && \
                           update-alternatives --install /usr/bin/python python /usr/bin/python3 1 || true && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           export CARGO_TARGET_DIR=/workspace/targets/${{ matrix.node }}-${{ matrix.arch }} && \
                           cargo build --release --bin ${{ matrix.node }} && \
                           echo '=== RELEASE (ARMv7) ==='; ls -la /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release || true && \
                           install -m 0755 /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} \
                                            /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }} && \
                           file /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }} || true && \
                           du -h  /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }} || true && \
                           ls -la /workspace/dist/${{ matrix.node }}-${{ matrix.arch }}"
      - name: Upload ${{ matrix.node }} (${{ matrix.arch }}) binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-${{ matrix.arch }}
          path: dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }}
          if-no-files-found: error
