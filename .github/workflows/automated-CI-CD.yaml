name: Build Nodes (x86_64 • Ubuntu GUI • armv7)

on:
  pull_request:
    types: [closed]                  # only build on merged PRs (guarded in each job)
  push:
    branches: [ dev/AVI/auto-CI-CD ] # for testing while iterating
  workflow_dispatch:

jobs:
  #  x86_64 CLI (servo, flight)
  x86_64_cli:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [servo, flight]
        arch: [x86_64-unknown-linux-gnu]
        include:
          - platform: linux/amd64
            image: ubuntu:22.04

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      - name: Build ${{ matrix.node }} (${{ matrix.arch }}) via Docker
        env:
          CARGO_TARGET_DIR: ${{ github.workspace }}/targets/${{ matrix.node }}-${{ matrix.arch }}
        run: |
          set -eux
          docker run --rm \
            --platform linux/amd64 \
            -v "${PWD}":/workspace \
            -w "/workspace/${{ matrix.node }}" \
            ubuntu:22.04 \
            /bin/bash -lc "apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             build-essential curl ca-certificates pkg-config libssl-dev git binutils file || true && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           CARGO_TARGET_DIR=/workspace/targets/${{ matrix.node }}-${{ matrix.arch }} \
                           cargo build --release && \
                           # show and strip in place (non-fatal if strip/file missing)
                           ls -la /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release || true && \
                           strip --strip-unneeded /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} || true && \
                           file  /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} || true && \
                           du -h  /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} || true"

      - name: Collect ${{ matrix.node }} (${{ matrix.arch }}) binary
        run: |
          set -eux
          rel="targets/${{ matrix.node }}-${{ matrix.arch }}/release"
          ls -la "$rel" || true
          mkdir -p "dist/${{ matrix.node }}-${{ matrix.arch }}"
          if [ -x "$rel/${{ matrix.node }}" ]; then
            cp "$rel/${{ matrix.node }}" "dist/${{ matrix.node }}-${{ matrix.arch }}/"
          else
            cand="$(find "$rel" -maxdepth 1 -type f -perm -111 ! -name '*.d' ! -name '*.rlib' | head -n1 || true)"
            if [ -n "$cand" ]; then
              cp "$cand" "dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }}"
            fi
          fi
          ls -la "dist/${{ matrix.node }}-${{ matrix.arch }}" || true

      - name: Upload ${{ matrix.node }} (${{ matrix.arch }}) binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-${{ matrix.arch }}
          path: dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }}
          if-no-files-found: error

  #  Ubuntu GUI (x86_64 packaging)
  ubuntu_gui:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [gui]
        arch: [x86_64-unknown-linux-gnu]
        include:
          - platform: linux/amd64
            image: ubuntu:22.04

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      - name: Build GUI (${{ matrix.arch }}) via Docker
        env:
          CARGO_TARGET_DIR: ${{ github.workspace }}/targets/gui-${{ matrix.arch }}
        run: |
          set -eux
          docker run --rm \
            --platform linux/amd64 \
            -v "${PWD}":/workspace \
            -w "/workspace/gui" \
            ubuntu:22.04 \
            /bin/bash -lc "apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             curl ca-certificates build-essential pkg-config git binutils file \
                             libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev \
                             libgtk-3-dev libglib2.0-dev gobject-introspection \
                             libsoup2.4-dev libayatana-appindicator3-dev libnotify-dev \
                             librsvg2-dev libssl-dev && \
                           # 4.1 → 4.0 pc/so symlink workaround (matches your working version)
                           ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/javascriptcoregtk-4.0.pc || true && \
                           ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc       /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc       || true && \
                           ln -sf /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.1.so               /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.0.so               || true && \
                           ln -sf /usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4.1.so        /usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4.0.so        || true && \
                           curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
                           apt-get install -y nodejs && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           export CARGO_TARGET_DIR=/workspace/targets/gui-${{ matrix.arch }} && \
                           npm ci || npm install && \
                           npm run tauri build && \
                           # optional: strip the Rust side binary (fs-gui) if present
                           test -f src-tauri/target/release/fs-gui && strip --strip-unneeded src-tauri/target/release/fs-gui || true && \
                           find src-tauri/target/release -maxdepth 4 -type f -print || true"

      - name: Upload GUI (${{ matrix.arch }}) packages (preferred)
        uses: actions/upload-artifact@v4
        with:
          name: gui-${{ matrix.arch }}-ubuntu
          path: |
            gui/src-tauri/target/release/bundle/**/*.AppImage
            gui/src-tauri/target/release/bundle/**/*.deb
          if-no-files-found: warn

      - name: Upload GUI fallback (fs-gui) if packages missing
        uses: actions/upload-artifact@v4
        with:
          name: gui-${{ matrix.arch }}-fs-gui
          path: gui/src-tauri/target/release/fs-gui
          if-no-files-found: warn

  #  armv7 (sam, flight)
  armv7_cli:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node: [sam, flight]
        arch: [armv7-unknown-linux-gnueabihf]
        include:
          - platform: linux/arm/v7
            image: arm32v7/ubuntu:22.04

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      - name: Build ${{ matrix.node }} (${{ matrix.arch }}) via Docker
        env:
          CARGO_TARGET_DIR: ${{ github.workspace }}/targets/${{ matrix.node }}-${{ matrix.arch }}
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -v "${PWD}":/workspace \
            -w "/workspace/${{ matrix.node }}" \
            arm32v7/ubuntu:22.04 \
            /bin/bash -lc "apt-get update && \
                           DEBIAN_FRONTEND=noninteractive apt-get install -y \
                             build-essential gcc-arm-linux-gnueabihf curl ca-certificates pkg-config libssl-dev git binutils file || true && \
                           curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                           source /root/.cargo/env && \
                           # native armv7 build in-container (no --target needed when platform=arm/v7)
                           CARGO_TARGET_DIR=/workspace/targets/${{ matrix.node }}-${{ matrix.arch }} \
                           cargo build --release && \
                           ls -la /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release || true && \
                           strip --strip-unneeded /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} || true && \
                           file  /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} || true && \
                           du -h  /workspace/targets/${{ matrix.node }}-${{ matrix.arch }}/release/${{ matrix.node }} || true"

      - name: Collect ${{ matrix.node }} (${{ matrix.arch }}) binary
        run: |
          set -eux
          rel="targets/${{ matrix.node }}-${{ matrix.arch }}/release"
          ls -la "$rel" || true
          mkdir -p "dist/${{ matrix.node }}-${{ matrix.arch }}"
          if [ -x "$rel/${{ matrix.node }}" ]; then
            cp "$rel/${{ matrix.node }}" "dist/${{ matrix.node }}-${{ matrix.arch }}/"
          else
            cand="$(find "$rel" -maxdepth 1 -type f -perm -111 ! -name '*.d' ! -name '*.rlib' | head -n1 || true)"
            if [ -n "$cand" ]; then
              cp "$cand" "dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }}"
            fi
          fi
          ls -la "dist/${{ matrix.node }}-${{ matrix.arch }}" || true

      - name: Upload ${{ matrix.node }} (${{ matrix.arch }}) binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-${{ matrix.arch }}
          # Guaranteed host path from the collect step
          path: dist/${{ matrix.node }}-${{ matrix.arch }}/${{ matrix.node }}
          if-no-files-found: error
