name: Build Nodes

on:
# Remove push [dev/AVI/auto-CI-CD] before merging
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [gui, servo, flight, sam, bms]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then
            sudo apt remove nodejs
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - &&\
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
            cargo install cross --locked
          fi
      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          cd ${{ matrix.node }}
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt install -y \
                libwebkit2gtk-4.1-dev \
                build-essential \
                libssl-dev \
                libgtk-3-dev \
                libayatana-appindicator3-dev \
                librsvg2-dev \
                libsoup2.4-dev \
                libjavascriptcoregtk-4.0-dev \
                libwebkit2gtk-4.0-dev
            npm run tauri build
          elif [ "${{ matrix.node }}" = "sam" ] || [ "${{ matrix.node }}" = "bms" ]; then
            rustup target add armv7-unknown-linux-gnueabihf
            cross build --target armv7-unknown-linux-gnueabihf --release
          else
            cargo build --release
          fi
      # Upload the binaries as an artifact (so we can download later)
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.node }}
            target/release/${{ matrix.node }}*

  # Compiles common library and then flight node for armv7 in a single run
  compile-armv7-nodes:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust and Vendor Dependencies (Host)
        # Runs cargo vendor/creates config.toml
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

          mkdir -p .cargo
          cargo vendor > .cargo/config.toml
          echo "Vendored dependencies and generated .cargo/config.toml successfully."

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Clear Cargo Git Cache
        run: rm -rf ~/.cargo/git/db

      - name: Build common and flight for ARMv7
        # Note: The working directory for the docker run is set to the repository root (/workspace)
        run: |
          set -eux
          # Set CARGO_HOME to a local directory so it's persisted/cached for this run
          # Set WORKSPACE to the root of the repository for easy pathing
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -e CARGO_HOME=/workspace/cargo_home \
            -v "$(pwd)":/workspace \
            -w /workspace \
            arm32v7/ubuntu:latest \
            /bin/bash -c "set -euxo pipefail; \
                          # Environment Setup
                          mkdir -p /workspace/cargo_home; \
                          apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev python3 python3-dev && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          . /workspace/cargo_home/env && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          rm -rf /workspace/cargo_home/git/db || true && \
                          git config --global fetch.fsckObjects false && \
                          git config --global fetch.recurseSubmodules true; \

                          # Build common shared library (cdylib)
                          (cd common && \
                           cargo rustc --release --target armv7-unknown-linux-gnueabihf --crate-type cdylib --features sequences); \

                          #nPrepare dependency for flight 
                          # Binary path: target/armv7-unknown-linux-gnueabihf/release/libcommon.so
                          # Destination path: flight/common.so
                          mkdir -p flight; \
                          mv target/armv7-unknown-linux-gnueabihf/release/libcommon.so flight/common.so; \

                          # Build flight node using common.so
                          (cd flight && \
                           cargo build --target armv7-unknown-linux-gnueabihf --release); \


                          mkdir -p /workspace/binaries_armv7; \
                          cp target/armv7-unknown-linux-gnueabihf/release/flight /workspace/binaries_armv7/flight; \
                          cp flight/common.so /workspace/binaries_armv7/libcommon.so; \
                          echo "Binaries moved to /workspace/binaries_armv7" \
                          "

      # Upload flight and common artifacts
      - name: Upload armv7 binaries
        uses: actions/upload-artifact@v4
        with:
          name: armv7-binaries
          path: binaries_armv7/*
