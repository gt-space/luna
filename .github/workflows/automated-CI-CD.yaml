name: Build Nodes

on:
  # Manual trigger + branch push + PRs to main
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # ================= Ubuntu (x86_64 runner) builds =================
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [gui, servo, flight, sam, bms]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then 
            sudo apt remove -y nodejs || true
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash -
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source "$HOME/.cargo/env"
            cargo install cross --locked
          fi

      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          set -eux
          cd "${{ matrix.node }}"
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt-get install -y \
              libwebkit2gtk-4.1-dev \
              build-essential \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libsoup2.4-dev \
              libjavascriptcoregtk-4.0-dev \
              libwebkit2gtk-4.0-dev
            npm run tauri build
          elif [ "${{ matrix.node }}" = "sam" ] || [ "${{ matrix.node }}" = "bms" ]; then
            rustup target add armv7-unknown-linux-gnueabihf
            cross build --target armv7-unknown-linux-gnueabihf --release
          else
            cargo build --release
          fi

      # Upload binaries/artifacts
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/armv7-unknown-linux-gnueabihf/release/${{ matrix.node }}
            target/release/${{ matrix.node }}*

  # ================= ARMv7 (flight) via QEMU Docker â€” reverted to your first version =================
  compile-armv7:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [flight]  # armv7 targets, sam handled by cross above

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clear Cargo Git Cache
        run: rm -rf ~/.cargo/git/db || true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Exactly your original approach, with one harmless addition:
      #  - install git in the container and set CARGO_NET_GIT_FETCH_WITH_CLI=true
      - name: Build ${{ matrix.node }} for ARMv7
        run: |
          set -eux
          docker run --rm \
            --platform linux/arm/v7 \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -v "$(pwd)":/workspace \
            -w /workspace/${{ matrix.node }} \
            arm32v7/ubuntu:latest \
            /bin/bash -c "set -euxo pipefail; \
                          apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl git pkg-config libssl-dev && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          mkdir -p /root/.cargo && \
                          echo 'export PATH=\"/root/.cargo/bin:\$PATH\"' >> /root/.bashrc && \
                          . /root/.cargo/env && \
                          # clear container-side cargo git cache (matches your host clear)
                          rm -rf /root/.cargo/git/db || true && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          # Build exactly like before (working dir is /workspace/flight)
                          cargo build --target armv7-unknown-linux-gnueabihf --release"

      - name: Upload armv7 binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-armv7-binary
          path: ${{ matrix.node }}/target/armv7-unknown-linux-gnueabihf/release/*
