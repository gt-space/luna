name: Build Nodes

on:
# Commented out for testing
# Changed github.event.pull_request.merged to github.event_name
#  pull_request:
#    types: [closed]
# Manual trigger
  push:
    branches: [dev/AVI/auto-CI-CD]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  compile-ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [gui, servo, flight]  # Ubuntu targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment for ${{ matrix.node }}
        run: |
          if [ "${{ matrix.node }}" = "gui" ]; then 
            sudo apt remove nodejs
            curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - &&\
            sudo apt install -y nodejs
          else
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
          fi
      - name: Build ${{ matrix.node }} for Ubuntu
        run: |
          cd ${{ matrix.node }}
          if [ "${{ matrix.node }}" = "gui" ]; then
            npm install
            sudo apt-get update
            sudo apt install -y \
                libwebkit2gtk-4.1-dev \
                build-essential \
                libssl-dev \
                libgtk-3-dev \
                libayatana-appindicator3-dev \
                librsvg2-dev \
                libsoup2.4-dev \
                libjavascriptcoregtk-4.0-dev \
                libwebkit2gtk-4.0-dev 
            npm run tauri build
          else
            sudo apt-get update
            sudo apt-get install -y python3 python3-venv python3-pip
            cargo install cross --locked
            rustup target add x86_64-unknown-linux-gnu
            cross build --target x86_64-unknown-linux-gnu --release
          fi
          
      # Upload the binaries as an artifact (so we can download later)
      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-ubuntu-binary
          path: |
            ${{ matrix.node }}/src-tauri/target/release/bundle/**/*.deb
            target/release/${{ matrix.node }}
  
  # Compile sam and flight for armv7 using QEMU
  compile-armv7:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [sam, flight]  # armv7 targets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clear Cargo Git Cache
        run: |
          rm -rf ~/.cargo/git/db
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build ${{ matrix.node }} for ARMv7
        run: |
          docker run --rm \
            --platform linux/arm/v7 \
            -v $(pwd):/workspace \
            -w /workspace/${{ matrix.node }} \
            arm32v7/ubuntu:latest \
            /bin/bash -c "apt-get update && \
                          apt-get install -y build-essential gcc-arm-linux-gnueabihf curl && \
                          curl https://sh.rustup.rs -sSf | sh -s -- -y && \
                          mkdir -p ~/.cargo && \
                          echo 'export PATH=\"/root/.cargo/bin:\$PATH\"' >> /root/.bashrc && \
                          . /root/.cargo/env && \
                          rustup target add armv7-unknown-linux-gnueabihf && \
                          cargo build --target armv7-unknown-linux-gnueabihf --release"
      - name: Upload armv7 binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.node }}-armv7-binary
          path: ${{ matrix.node }}/target/armv7-unknown-linux-gnueabihf/release/*
